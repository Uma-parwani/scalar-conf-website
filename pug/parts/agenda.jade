section#agenda.row

  include to-top-btn.pug

  header.section-title
    h1 Agenda
  div.agenda-table.small-12.medium-12.large-12.columns
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 8:00
      div.description.small-12.medium-10.large-11.columns Registration
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 8:50
      div.description.small-12.medium-10.large-11.columns Welcome
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk
          :markdown
          # Streams on top of scala
          Why it's cool for everyone and what is the current state.
          Everybody has something about streams on scala platform : Iteratee, scalaz.streams, Reactive streams, akka.io… But is it usefull for day to day developper job? Is it only for database drivers? What is the differences between all this technologies? So, why you need streams in your app, understand what is it and use it in real world.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/quentin-adam.png")
          div.speaker-bio
            h2 Quentin ADAM
            a(target="_blank", href="https://twitter.com/waxzce").speaker-link @waxzce
            p Quentin ADAM is the CEO of Clever Cloud: a Platform as a Service company allowing you to run java, scala, ruby, node.js, php, python or go applications, with auto scaling and auto healing features. This position allow him to study lots of applications, code, practice, and extract some talks and advises. Regular speaker at various tech conference, he’s focused to help developers to deliver quickly and happily good applications.
    div.row
      div.time.small-12.medium-2.large-1.columns 9:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Graphs &amp; gremlins
          p NoSQL databases are here for good. Historically relational databases are with us at least from '80. Their underlying model is well understood and there are lots of proven tools / standards around them. It's mid 2010 now. There is a plethora of different database models that could be used. Still there is a lot of myths about NoSQL databases&mdash;especially connected with the trade-offs you need to make if you use them (e.g. lack of transactionality or flexibility etc).
          p Here comes graph database model. I wanted to show you how to deal with graph databases from Scala. We'll use scala-blueprints and gremlin-scala libraries. I wanted to convince you that you can use graph model without sacrificing features you know from relational databases and even achieve greater level of flexibility and much improved performance in certain cases. Graph databases is a vast subject so I will focus only on trying to convince you that graph databases and all the infrastructure and emerging standards around them are mature enough to be successfully used at least in probably most small to medium sized projects. Also, thanks to available Scala libraries, it's also fun.
          p I will use OrientDB&mdash;in my opinion the most approachable graph database available these days.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/pawel-dolega.png")
          div.speaker-bio
            h2 Paweł Dolega
            a(target="_blank", href="https://twitter.com/pdolega").speaker-link @pdolega
            p Paweł Dolega is co-founder and software engineer at Nexelem&mdash;Scala / Java oriented software house based in Krakow, Poland. He worked previously in big Polish companies delivering classic enterprise applications and later as virtualization subject matter expert at IBM. For last 5 years he is happy to work as team lead / software engineer&mdash;usually in Scala, Java EE and AngularJS.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 10:00
      div.description.small-12.medium-10.large-11.columns Coffee break
    div.row
      div.time.small-12.medium-2.large-1.columns 10:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Supler: complex web forms, not so complex
          p Let’s face it. Creating websites with complex forms is a pain, and usually ends in lots of code duplication and frustration.
          p That’s why we have decided to create
            a(target="_blank", href="https://github.com/softwaremill/supler") Supler
            |. Supler has a very focused set of functionality:
          ul
            li a Scala DSL for defining forms, generating JSON form description, applying values to backing objects and running actions &amp; validations on the backend
            li a Javascript HTML form renderer, client-side validations, form templating and automatic reloading
          p Come and see some live-coding showing various Supler features, and explaining the Supler approach!
        div.speaker
          div.speaker-photo
            img(src="images/speakers/tomasz-szymanski.png")
            img(src="images/speakers/adam-warski.png", style="margin-top:-1px;")
          div.speaker-bio
            h2 Tomasz Szymański&nbsp;&amp; Adam&nbsp;Warski
            a(target="_blank", href="https://twitter.com/szimano", style="margin-bottom: 0").speaker-link @szimano
            a(target="_blank", href="https://twitter.com/adamwarski").speaker-link @adamwarski
            p Tomek: I have been working on almost all steps of the Software Engineer career ladder. Starting from intern at JBoss, a division of RedHat, ranging to Application Architect in a big financial institution in South Africa.
            p In the meantime I have started a company which aims at creating a cool place to work at.
            p I believe in agile methodologies, good code and communities. For the last I have been leader of Warsaw JUG for many years, and recently I have started Warsaw Groovy User Group.
            p Adam: I am one of the co-founders of SoftwareMill, where I code mainly using Scala and other interesting technologies. I am involved in open-source projects, such as Hibernate Envers, ElasticMQ, Veripacks and MacWire. I have been a speaker at major conferences, such as JavaOne, Devoxx, JavaZone or JFokus.
            p Apart from writing closed- and open-source software, in my free time I try to read the Internet on various programming-related subjects, any ideas or insights end up on my blog
              a(target="_blank", href="http://www.warski.org/blog") warski.org/blog
              |.
    div.row
      div.time.small-12.medium-2.large-1.columns 11:00
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Being Slick and avoiding slip-ups
          p Show how to efficiently use
            a(target="_blank", href="http://slick.typesafe.com/") Slick
            |  and avoid some performance related pitfalls (see my blog post:
            a(target="_blank", href="http://blog.scalac.io/2015/01/27/rough-experience-with-slick.html") Rough Experience With Slick
            |). Also, describe where Slick is heading with its upcoming 3.0 release.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/radek-tkaczyk.png")
          div.speaker-bio
            h2 Radek Tkaczyk
            a(target="_blank", href="https://twitter.com/radotkaczyk").speaker-link @radotkaczyk
            p Scala developer @ ScalaC. Focused on creating performant backend solutions. Passionate about functional programming (Clojure, Haskell) and clean code.
    div.row
      div.time.small-12.medium-2.large-1.columns 11:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 The Mutability Matrix of Pain
          p Rich Hickey has previously discussed value, identity and state&mdash;but outside the context of the specifics of how we write code on the JVM.  But how do these concepts correlate to the programming constructs we use to write code in Java and Scala, and how do we minimize or mitigate the impact of concurrency with them?  This talk will be an accessible exploration of the JVM Heap, thread stacks and concurrency primitives on the JVM and how to compose multi-threaded code in Java and Scala.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/jamie-allen.png")
          div.speaker-bio
            h2 Jamie Allen
            a(target="_blank", href="https://twitter.com/jamie_allen").speaker-link @jamie_allen
            p Jamie is the Senior Director of Global Services for Typesafe, responsible for the enablement of customers around the world through consulting and training. He is the author of Effective Akka book from O’Reilly, and the co-author of the upcoming Reactive Design Patterns book from Manning. Jamie is a computer languages enthusiast who enjoys writing performant code that most efficiently leverages the resources at hand.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 12:00
      div.description.small-12.medium-10.large-11.columns Lunch
    div.row
      div.time.small-12.medium-2.large-1.columns 13:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Function-Passing Style: Typed, Distributed Functional Programming
          p The functional programming paradigm nicely fits problems in distributed programming. For example, moving computation to data can achieve multi-fold improvements in latency and throughput of big-data-style applications. This talk presents a new paradigm of “Function Passing Style” as an effective means of distributed programming. By bringing together recent advances in type systems research and new language features in Scala, this paradigm promotes new patterns of programming in distributed environments using distributable lambdas and types. We lay out the principles of this paradigm as well as guidelines for its application in practice.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/heather-miller.png")
          div.speaker-bio
            h2 Heather Miller
            a(target="_blank", href="https://twitter.com/heathercmiller").speaker-link @heathercmiller
            p Heather Miller has been a member of the Scala team, and a PhD student under Martin Odersky, since 2011. Her research focuses on programming language and compiler support for distributed programming&mdash;in particular, using type systems to facilitate the design of new, functional distributed systems. She is a regular contributor to Scala, and was on the team that designed Scala’s Futures &amp; Promises, is responsible for improving several aspects of Scala documentation (API docs, guides, tutorials, quickrefs, including
              a(target="_blank", href="http://docs.scala-lang.org/") docs.scala-lang.org
              |), and led the now &gt;200,000-student-strong Coursera massive open online course, “Functional Programming Principles in Scala.”
    div.row
      div.time.small-12.medium-2.large-1.columns 14:00
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 How AKKA helped me to build an (almost successful) cloud for telco services
          p This is the story how AKKA helped to build a solution (in a brief period of time) that was not doable straightforward with classic Java enterprise stack. This is also a confession of a programmer who feels refreshed by a stack that not only helps to create what seems hard but also don’t make you bend your ideas to fit that stack needs.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/tomasz-kogut.png")
          div.speaker-bio
            h2 Tomasz Kogut
            a(target="_blank", href="https://twitter.com/almendar").speaker-link @almendar
            p I'm a JVM platform based programmer working in a telco-focused company. I've spent some time getting my hands dirty with native code down to the kernel level on mobile platforms. That experience allows me to see alternative ways to the established "enterprise" practices in making software. Focusing on Scala since its 2.7 version.
    div.row
      div.time.small-12.medium-2.large-1.columns 14:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Monads&mdash;asking the right question
          p When entering the world of functional programming, one is quickly introduced with a concept of a Monad. Concept that is for some reason really hard to grasp and comprehend. When querying the Internet for "What is a Monad?" you will most likely learn that "you do not need to know the category theory to understand monads" and that "you are not asking the right question". The first thing that came to my mind, when I was struggling with this dilemma, was "Well, what is the right question then?".
          p This talk is all about looking for that right question and answering it. After this talk I hope you will find yourself knowing and understanding the concept, being able to apply it in a daily programming routine.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/pawel-szulc.png")
          div.speaker-bio
            h2 Pawel Szulc
            a(target="_blank", href="https://twitter.com/rabbitonweb").speaker-link @rabbitonweb
            p Software engineer, programmer, developer. Experienced with Java ecosystem. Currently having tons of fun working with Scala, Akka and Apache Spark. Humble apprentice of Functional Programming. Runs a blog
              a(target="_blank", href="http://www.rabbitonweb.com") rabbitonweb.com
              |.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 15:00
      div.description.small-12.medium-10.large-11.columns Coffee
    div.row
      div.time.small-12.medium-2.large-1.columns 15:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Developing reactive REST /&nbsp;JSON microservices with Play and Spray&nbsp;/&nbsp;Akka HTTP (Future[T] included)&nbsp;&mdash; 30-minute live demo
          p The title says it all (the rest is purposely vague and muddy).
          p Future gonna clear it up!
        div.speaker
          div.speaker-photo
            img(src="images/speakers/jacek-laskowski.png")
          div.speaker-bio
            h2 Jacek Laskowski
            a(target="_blank", href="https://twitter.com/jaceklaskowski").speaker-link @jaceklaskowski
            p
              a(target="_blank", href="http://blog.jaceklaskowski.pl/") Jacek Laskowski
              | is an independent IT professional offering services as a team and tech leader, open source software developer, technology advocate, course instructor, blogger, conference speaker, community leader and organiser, technical advisor and IT business liaison. I'm operating on the JVM platform with Scala and Java as the two main languages of choice, and helping people get the most out of it.
              p My personal goal is to promote the Scala language in Poland as a leader of the
                a(target="_blank", href="http://warsawscala.pl") Warsaw Scala Enthusiasts group
                | and working with top-notch software houses in Poland.
              p I'm the founder and a former leader of
                a(target="_blank", href="http://warszawa.jug.pl") Warszawa Java User Group
                | in Warsaw, Poland. In 2015 I was accepted to an exclusive group of passionate Java technology and community leaders who are community-nominated and selected under a project sponsored by Oracle and became a
                a(target="_blank", href="https://java-champions.java.net/") Java Champion
                |.
    div.row
      div.time.small-12.medium-2.large-1.columns 16:00
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Probabilistic modelling with Scala
          p Probabilistic models allow you to extract insights from your data. Bayesian Networks are one technique for modeling relations between random variables which are both easy to grasp and effective in learning under many conditions.
          p This talk will give you an introduction on probabilistic modeling and Bayesian Networks and show you an example analysis done in Scala.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/martin-mauch.png")
          div.speaker-bio
            h2 Martin Mauch
            a(target="_blank", href="https://twitter.com/gimme_moe").speaker-link @gimme_moe
            p Martin is working at crealytics, a German online advertising company and is developing a bid management solution in Scala. This involves a lot of number crunching and statistical modeling for which Scala is a almost perfect fit.
            p Martin is also a long-term meditator and interested in neuro-feedback, which by lucky coincidence also requires interesting modeling techniques.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 16:30
      div.description.small-12.medium-10.large-11.columns Coffee
    div.row
      div.time.small-12.medium-2.large-1.columns 17:00
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Delimited dependently-typed monadic checked exceptions in Scala
          p Scala does not have checked exceptions: the compiler will not consider a failure to handle exceptions as an error. This is, perhaps, the single area in which Java offers better static safety than Scala, but offers no way for this checking to be turned off when it's not wanted, which frequently leads to the compiler being a hindrance rather than a help to developers.
          p Jon will demonstrate how Scala's type system can be persuaded to enforce checked exceptions, with negligible syntactic burden at the call site, supporting validation-style aggregation of exceptions, and with the flexibility to be turned on and off as desired.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/jon-pretty.png")
          div.speaker-bio
            h2 Jon Pretty
            a(target="_blank", href="http://rapture.io/").speaker-link rapture.io
            p Jon is a longstanding contributor to the Scala community, having launched the first commercial applications written in Scala over ten years ago. He is best known for his work on Rapture, and his contributions to Typelevel Scala.
    div.row
      div.time.small-12.medium-2.large-1.columns 17:30
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1 Fresh from the Oven: Akka gets Typed
          p So… “What’s hot?” you might ask. “Well… types are!”. In this talk we’ll focus on the most typed additions to Akka ever-since, the two upcoming modules: Akka-Streams (1.0-M1) and Akka-Typed (2.4.x). We’ll talk about the road to these, what Reactive Streams are and what they mean to you and the entire JVM ecosystem, and finally look into their internals and roadmap.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/konrad-malawski.png")
          div.speaker-bio
            h2 Konrad &#8175;ktoso&#8175; Malawski
            a(target="_blank", href="https://twitter.com/ktosopl").speaker-link @ktosopl
            p Konrad is a passionate late-night hakker, living by the motto "Life is Study!", working on the Akka toolkit @ Typesafe. He also participated in the Reactive Streams initiative and has implemented its Technology Compatibility Kit. He has founded and leads multiple user groups (ranging from the PolishJUG, though functional programming and computer science reading clubs), and most notably co-leading the annual GeeCON conference and being a member of the JavaOne SF Program Committee. His favourite discussion topics range from distributed systems to japanese culture (and capybaras).
            p In those rare times he's not coding, he spreads the joy of computer science, through helping local user groups and whitepaper reading club&mdash;many of which he either founded or helped kickstart.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 18:00
      div.description.small-12.medium-10.large-11.columns Ending
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 18:30
      div.description.small-12.medium-10.large-11.columns Party!
