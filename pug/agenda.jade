section#agenda.row
  a.to-top(data-scroll, href="#top")
    img(src="images/icons/to-top.svg")
    br
    | to top
  header.section-title
    h1 Wednesday, 4th April: training (separate tickets)
  div.agenda-table.small-12.medium-12.large-12.columns
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk
          h1
            a(href="#goes") John A. De Goes 
            | Applied Functional Programming in Scala (2 days)
          p Introduction
          p Applied Functional Programming in Scala is an intensive, two-day workshop that teaches attendees to effectively use functional programming in Scala to build high-performance, correct-by-construction software that's easier to reason about, easier to test, easier to compose, and easier to change safely. Taught by John A. De Goes, a CTO whose company is built on functional programming in Scala, attendees will gain mastery of practical techniques in functional programming. If you are struggling with effectively using functional programming in Scala to solve real world problems, then this is the workshop for you.
          p Relevancy
          p Adoption of the Scala programming language has grown tremendously in recent years, partially because of the number and quality of libraries written in Scala (including Spark, Akka, Play, Shapeless, scodec, and many others). Yet, the language is broad and complex, containing many features not present in many other common programming languages (implicits, higher-kinded types, declaration-site variance, type lambdas). Most problems have many different and completely incompatible solutions, and the best choice is not obvious. Although the majority of Scala developers know the basics of the programming language, they struggle to translate simple examples of functional programming (like pattern matching and collection processing) into the large-scale code bases and real world problems they work on every day. This course is designed to help Scala developers tackle the most complex problems in the largest code bases using the tremendous real world power of functional programming.
          p Benefits
          p After attending this workshop, attendees will understand how to scale functional programming techniques to real-world problems, including complex state management, input/output, concurrency, resource management, and much more. Attendees will develop a newfound appreciation for how to write simpler code that is correct-by-construction, using techniques in functional programming and the strong type system of the Scala programming language. Companies whose Scala teams are struggling to feel comfortable with the complex language, or who have yet to attain the mastery required to reduce defects and increase productivity, are encouraged to send their developers to this workshop. Functional programming in Scala can be a tremendous competitive advantage for developers who have been properly trained.
          p What is the required Scala level?
          p You should be familiar with pattern matching and recursion, but no knowledge above them is required.
  header.section-title
    h1 Thursday, 5th April: long workshops (separate tickets)
  div.agenda-table.small-12.medium-12.large-12.columns
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-ciesielski
          h1
            a(href="#ciesielski") Krzysztof Ciesielski 
            | Recursion Schemes (1 day)
          p An intense training introducing patterns for processing recursive data. We meet such data as JSON/XML objects or various kinds of trees. Recursion schemes focus on a functional approach, allowing us to do recursion in a very elegant and compositional way. This workshop will be based on the Scalaz and Matryoshka libraries. We will start with the basics (fixed-point datatypes), then we will cover basic processing with catamorphisms. Our next step will be some exploration of other kinds of useful morphisms, like paramorphisms, zygomorphisms, and a bunch of other transformations. Finally, we'll try to combine various morphisms together to understand the advantage of their composability.
          p Requirements: intermediate experience with functional programming in Scala (higher-order functions, algebraic data types, higher-kinded types, functors, applicatives). Nice to have: knowledge of free monads.
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-matuszak
          h1
            a(href="#matuszak") Marcin Matuszak 
            | Typelevel workshop (1 day)
          p Cats library has finally reached stable release. It's a good opportunity to learn how to build a purely functional application using Typelevel stack. The goal of this workshop is to build small REST backend application using Typelevel libraries.
          p This will be a mix of lecture, exercise and workshop.
          p Prerequisites:
          p * to benefit from this workshop it's advised to have about a year's experience in Scala (or equivalent language)
          p * be familiar with Scala syntax 
          p * laptop with favourite editor and sbt (preferred 1.0.x version)
          p Outcomes:
          p * Understand benefits of building purely functional application
          p * Learn the basic type classes (Functor, Monad, Applicative) and its practical application
          p * Learn how to use libraries: cats, http4s, circe, monocle
          p * Have fun
          p
            | Resources: 
            a(href="https://github.com/mrcmatuszak/scalar-2018-typelevel-workshop") https://github.com/mrcmatuszak/scalar-2018-typelevel-workshop
          p This will not be an introduction to Scala. The workshop will take between 6 and 8 hours.
    div.row          
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-degoes
          h1
            a(href="#goes") John A. De Goes 
            | Applied Functional Programming in Scala
          p Continued
  header.section-title
    h1 Agenda: Friday, 6th April
  div.agenda-table.small-12.medium-12.large-12.columns
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 8:00
      div.description.small-12.medium-10.large-11.columns Registration
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 8:50
      div.description.small-12.medium-10.large-11.columns Welcome, then first choice: 3 talks or 1 workshop
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-bonetti
          h1
            a(href="#bonetti") Stefano Bonetti 
            | Stream Driven Development - design your data pipeline with Akka Streams
          p Akka Streams is a well-known Reactive Streams implementation that helps you build asynchronous, data-intensive applications with no predetermined data volumes. But how would you leverage its full power to design complex, Akka-backed reactive pipelines? At HomeAway.com we devised an approach to tackle this problem, combining elements of Domain-Driven Design with the abstraction power of the Akka Streams model. In this talk we'll present our approach by example, discussing useful patterns to (1) reason about your streaming application and identify its building blocks; (2) type-drive the implementation; (3) handle failure and (4) instrument your application for logging and monitoring purposes      
    div.row
      div.time.small-12.medium-2.large-1.columns 9:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-koziarkiewicz
          h1
            a(href="#koziarkiewicz") Mikołaj Koziarkiewicz 
            | What I learned about Akka Streams by making a game with it
          p Akka Streams is a versatile framework for creating reactive systems. Does it handle supporting an unusual use case of an arcade video game? In this presentation, I will show how such a game may be implemented, and how this kind of stack holds up in terms of scalability and development effort.
          p Most importantly, I will highlight potentials pitfalls when using Akka Streams in low-latency, erratic-input applications.
    div.row
      div.time.small-12.medium-2.large-1.columns 10:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-bernhardt
          h1
            a(href="#bernhardt") Manuel Bernhardt 
            | Is there anybody out there?
          p Welcome to the world as seen by a cluster node! This is a world full of changes in link quality, network partitions and outages. In this talk you will learn about failure detectors, gossip protocols and split brain resolvers in the context of Akka Cluster.
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00-10:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-plachta
          h1
            | Workshop: 
            a(href="#plachta") Michał Płachta 
            | TDDing Functional Web Apps
          p Get some theoretical and practical overview of the TDD approach & Functional Programming by creating the multiplayer Pac-Man game server: 
          p * Test Driven Development (baby steps, starting with the game logic and moving towards HTTP).
          p * Purely functional approach (separated data and behaviors, no exceptions, ADTs, Options).
          p * Modeling using immutable structures.
          p * Making impossible states impossible.
          p * Using function composition.
          p * Using Monix Atomic to handle state.
          p * Separate concerns by using functions as input parameters.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 10:30
      div.description.small-12.medium-10.large-11.columns Coffee break
    div.row
      div.time.small-12.medium-2.large-1.columns 11:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-degoes
          h1
            a(href="#goes") John A. De Goes 
            | Scalaz 8 vs Akka Actors
          p In this presentation, John A. De Goes looks at several concurrency and scalability problems similar to the ones all programmers have to face, and shows how purely functional solutions written using Scalaz 8 are shorter, faster, easier to test, and easier to understand than competing solutions written using Akka actors. Discover how functional programming can be your secret superpower when it comes to quickly building bullet-proof business applications!
    div.row
      div.time.small-12.medium-2.large-1.columns 11:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-pustelnik
          h1
            a(href="#pustelnik") Jan Pustelnik 
            | Real serverless with CRDTs and IPFS
          p You probably have heard the pun that serverless is just running software on another person's computer. In this talk we would like to show something else - "real serverless" which is running software without any servers in a fully distributed, peer-to-peer manner. The software stack for this example will consist of Scala, Akka's CRDTs and the Inter Planetary File System (ipfs).
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 12:00
      div.description.small-12.medium-10.large-11.columns Lunch, then choose: 3 talks or 1 workshop
    div.row
      div.time.small-12.medium-2.large-1.columns 13:30-15:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-owczarek
          h1
            | Workshop: 
            a(href="#owczarek") Kamil Owczarek 
            | Introduction to Spark ML
          p During the workshop I will explain the basic philosophy behind Spark ML and how it fits inside the larger Spark ecosysystem. The participants will learn how to perform single machine learning tasks, productionize and train simple ML models, as well as compose, train and cross-validate more complex Spark ML Pipelines. We will also go through the specifics of some of the useful out-of-the-box Spark ML components.
    div.row
      div.time.small-12.medium-2.large-1.columns 13:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-pavkin
          h1
            a(href="#pavkin") Vladimir Pavkin 
            | Leveraging Spire for complex time allocation logic
          p Spire is a great toolkit of mathematical abstractions and algorithms. Despite mathematical "focus", many instruments in Spire are defined in an abstract, composable way. This allows to leverage the power of spire for tasks, that don't look like mathematical at first glance.
          p In this talk we'll explore how Spire can help with solving various time resource allocation problems.
    div.row
      div.time.small-12.medium-2.large-1.columns 14:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-pitula
          h1
            a(href="#pitula") Wojciech Pituła 
            | Object algebras and why you won't touch http library ever again
          p How many times have you reimplemented exactly the same http endpoints in server, client and documentation? How often have you struggled with implementation details of your http library? It doesn't matter if it's Play, akka-http or http4s, in most cases it's the business logic that creates a real value.
          p Let me introduce you to the endpoints, library that tries very hard to solve this problem for you and to object algebras, implementation of the interpreter pattern for those of us who always felt that tagless final and free monads are not so great.
    div.row
      div.time.small-12.medium-2.large-1.columns 14:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-grebennikov
          h1
            a(href="#grebennikov") Roman Grebennikov 
            | Case classes ate my RAM
          p Case class is a most widely used way to model your data. But when the data is huge, you can amazingly discover that only a tiny 10% of your precious RAM used for the data itself. But where is other 90%?
          p During this talk, you will have a deep dive to the JVM internals learning about case class layout, Scala collections true memory overhead and ways to decrease it. We'll introduce a scala-packed, the project helped Findify to solve a real-life case of reducing memory usage by an order of magnitude by extending Scala collections with transparent Shapeless-based case class <-> Array[Byte] packing.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 15:00
      div.description.small-12.medium-10.large-11.columns Coffee
    div.row
      div.time.small-12.medium-2.large-1.columns 15:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-birchall
          h1
            a(href="#birchall") Chris Birchall 
            | Bring Your Own Effect
          p Recently there is a trend in Scala libraries abstracting over the effect container in which they wrap their computations, allowing users to choose the effect that makes sense for their program.
          p I'll talk you through how I added this feature to the ScalaCache library, and explain how you can do the same for your own code and why it's a good idea.
    div.row
      div.time.small-12.medium-2.large-1.columns 16:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-jacobowitz
          h1
            a(href="#jacobowitz") Luka Jacobowitz 
            | Traversals for all occasions
          p One of the most important aspects of programming is iterating or traversing all sorts of collections. The Traversable type class is without a doubt one of the most useful gems of functional programming and, because of its vast versatility, also often the answer to "How do I..."-questions, but how many different kinds of traversals are there?
          p This talks aims to showcase some of the lesser known facts of traversable functors and also a bunch of other related type classes and functions that exploit different properties of our data types. We'll see some more obscure things like requiring the commutative property to traverse unordered containers like Spark RDDs, or more straightforward ones like running a bunch of asynchronous actions in parallel, waiting for the results and accumulating errors along the way in a simple one-liner.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 16:30
      div.description.small-12.medium-10.large-11.columns Coffee
    div.row
      div.time.small-12.medium-2.large-1.columns 17:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-uvarova
          h1
            a(href="#uvarova") Inna Uvarova 
            | and 
            a(href="#grajek") Krzysztof Grajek 
            | PW-Sat2 - Polish CubeSat project
          p PW-Sat2 is the project held by Warsaw University of Technology in Students' Space Association at Faculty of Power and Aeronautical Engineering. The project had started in Q1 2013, one year after the launch of the first Polish satellite PW-Sat. As a continuation of the space debris mitigation subject, the second satellite main payload is a deorbit sail fully designed and developed by students. Several additional payloads and been proposed and chosen as a secondary mission goals. 
          p The primary PW-Sat2 mission is to test our two innovative engineering solutions: a deorbitation system and a sun sensor device.
          p SoftwareMill's engineers bring to the table the software project for radioamateur community to support communication for PW-Sat2
    div.row
      div.time.small-12.medium-2.large-1.columns 17:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-ratajski
          h1
            a(href="#ratajski") Jarek Ratajski 
            | ScalaJS - web without pain of JavaScript
          p Are You  doing web applications but JavaScript holds You back?
          p Maybe You want to use tools like Gulp, LessCSS, Sass, NPM and framework like Angular and React ,but for sure with something safer than JS?
          p You no longer have to sacrifice Yourself and fight with stupid errors for days.
          p You may use a decent language with typesafety and still use all the power of web developent.
          p So lets discuss ScalaJS a JavaScript transpiler and see how to: efficiently develop web application using typesafety and; code AngularJS applications using Scala; use same datastructures and interfaces on client and server and reuse validation rules on both.
          p Finally I will compare it to other simillar solutions like TypeScript, Elm, PureScript and discuss when and why could You use any of theese.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 18:30
      div.description.small-12.medium-10.large-11.columns Party: BLU Club, Mazowiecka 14/2
  header.section-title
    h1 Agenda: Saturday, 7th April    
  div.agenda-table.small-12.medium-12.large-12.columns
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 
      div.description.small-12.medium-10.large-11.columns Choose: 3 talks or 1 workshop
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-chrons
          h1
            a(href="#chrons") Otto Chrons 
            | Many uses of ScalaFiddle
          p ScalaFiddle is a popular playground for experimenting with and sharing Scala code online. It has a lot of use cases that go beyond the basic ones, including building interactive fiddles, integrating fiddles into documentation and utilizing HTML for visual output. This talk covers these different uses of ScalaFiddle and how they can enhance your productivity.
    div.row
      div.time.small-12.medium-2.large-1.columns 9:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-gosk
          h1
            a(href="#gosk") Marcin Gosk 
            | Blockchain for Scala lovers
          p Blockchain! Blockchain! Blockchain!
          p If you are a geek or startup entrepreneur you probably hear word "blockchain" very often. It is a revolutionary technology that allows you to build fully distributed systems without any central authority.
          p Today I want to help You to participate in this revolution. During this talk I will present basic technology concepts and I will show You "how to create your own blockchain" in Scala.
    div.row
      div.time.small-12.medium-2.large-1.columns 10:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-kowalczykiewicz
          h1
            a(href="#kowalczykiewicz") Michał Kowalczykiewicz 
            | Rendezvous between functional & declarative programming
          p In this presentation I will show how we combine declarative and functional programming.
          p Many of our retail-apps run on LogicBlox (application framework) and are written in the pure-declarative language LogiQL (implementation of first-order logic, superset of Prolog/Datalog). Both of these technologies are developed at Infor/Predictix.
          p What is interesting is that some time ago we started to... generate the declarative code.
          p The next part of the speech will be about the structure of code generators written in Scala (language, grammar, AST, parsers, etc...)
    div.row
      div.time.small-12.medium-2.large-1.columns 9:00-10:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-ossa
          h1
            | Workshop:  
            a(href="#ossa") Jeferson David Ossa 
            | Akka Cluster Management on Kubernetes
          p The aim of this workshop is to get familiar with Akka Mamagement Service Discovery using Kubernetes API, We will create a stateful distributed service  with persistent entities via sharding in persistence mode.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 10:30
      div.description.small-12.medium-10.large-11.columns Coffee break
    div.row
      div.time.small-12.medium-2.large-1.columns 11:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-pretty
          h1
            a(href="#pretty") Jon Pretty 
            | Lifting Data Structures to the Type-level
          p Many of us have seen how a List in Scala - a value representing a list of different values - can be lifted to the type-level to become an HList, that is, a type representing a list of different types.
          p But can we lift other data structures like Set and Map to the type-level, and perform useful operations on them? Can we do so while maintaining their performance characteristics at compile time?
          p The answer is "yes"!
    div.row
      div.time.small-12.medium-2.large-1.columns 11:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-gurnell
          h1
            a(href="#gurnell") Dave Gurnell 
            | Atlas: A voyage of discovery on the high seas of scripting
          p
            | In this talk Dave will describe the design, motivation, and implementation of 
            a(href="https://github.com/cartographerio/atlas") Atlas
            | , a scripting language written in Scala. He'll discuss the use of functional techniques to implement some interesting details including parsing, sandboxing, monitoring, and interaction with the host environment. It'll be a chance to look at Scala for an interesting and slightly out-of-the-ordinary application.
          p
            | What enterprise software is complete without scripting support? When checkboxes and sliders aren't flexible enough, simply embed 
            a(href="http://www.jython.org/") Python 
            | or 
            a(href="http://openjdk.java.net/projects/nashorn/") JavaScript 
            | to give your users all the power in the world!
          p All that power will go to their heads, though. The code will need to be sandboxed and monitored so scripts can't consume too many resources. And it'll need to talk to the database so it'll have to be asynchronous and non-blocking. We can't expose any of that complexity to the user, though, so we'll need to take care of unwanted effects in the interpreter. And don't even get me started on endorsing an imperative scripting language in our beautiful Scala codebase.
          p No. JavaScript and Python won't do. What we need is a *new* scripting language. Something shiny. Something invented here. How could this possibly be a bad idea?
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 12:00
      div.description.small-12.medium-10.large-11.columns Lunch, then choose: 3 talks or 1 workshop
    div.row
      div.time.small-12.medium-2.large-1.columns 13:30-15:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#workshop-dorrell
          h1
            | Workshop: 
            a(href="#dorrell") Greg Dorrell 
            | Fullstack Scala with Play and Scala.js
          p We will build a rich interactive website with Play and Scala.js.
          p We'll start with some background about Play and Scala.js. Then we will build a fullstack Scala project from scratch, so you can go away start using it yourself. We will get hands on experience with Scala.js specific libraries, and wrappers around JavaScript libraries - specifically the Google Maps API. 
    div.row
      div.time.small-12.medium-2.large-1.columns 13:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-owczarek
          h1
            a(href="#owczarek") Kamil Owczarek 
            | Spark and Akka for Big Data systems, in practice
          p If you ask a Scala / Big Data developer about the two major frameworks / toolkits written in and for the language, the answer will likely be: Akka and Spark. From the perspective of data-driven applications and systems, both are productive tools, whose possibilities (batch jobs, streaming, data ingestion) can sometimes overlap. So how to incorporate Spark and Akka in one Big Data system and delineate between them to make the most of them both? The author will attempt to answer that question, based on his experience with designing and developing such systems, going through frequent concerns, such as: data ingestion, complex transformations, constructing machine learning pipelines and exposing transformed data. 
    div.row
      div.time.small-12.medium-2.large-1.columns 14:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-kunicki
          h1
            a(href="#kunicki") Jacek Kunicki 
            | Practical Reactive Streams with Monix
          p Stream processing is a hot topic today and it's easy to get lost among all the possibilities. In this live coding session we will explore the Reactive Streams approach used by the Monix project - one of the Scala implementations of the Reactive Streams concepts. On an almost real-life example we're going to walk through both the basics and some more advanced usages of the library.
    div.row
      div.time.small-12.medium-2.large-1.columns 14:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-przewoznik
          h1
            a(href="#przewoznik") Maciej Przewoźnik 
            | Russian Roulette with Scala: six things that may hurt your project
          p Trendy and new language features are often tempting and attractive. Sometimes, they are also dangerous, but it may not be obvious from the beginning. For example, what may be possibly wrong with Scala List? When does your really smart Scala code become unreadable to others or just inefficient? What are the language gotchas? What may go wrong as the project grows? The presentation will focus on such questions in order to help developers avoid certain Scala pitfalls.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 15:00
      div.description.small-12.medium-10.large-11.columns Coffee
    div.row
      div.time.small-12.medium-2.large-1.columns 15:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-jankiewicz
          h1
            a(href="#jankiewicz") Bartosz Jankiewicz 
            | Scala based services resilience in the real world
          p At Ocado we need to orchestrate tens of micro-services. In my team we have been using Scala stack for the past few years to successfully deliver quality products to our customers. I would like to bring some lessons we have learnt when building one of the biggest e-commerce systems. The lessons include some known patterns and principles applied to service communication such as timeouts, retries, circuit-breakers, speculative tasks. I will present the caveats of services communication along with the methods of detecting the issues and Scala tools we used to address them including AWS Beanstalk, Akka, Monix, Sttp and more.
    div.row
      div.time.small-12.medium-2.large-1.columns 16:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-kittel
          h1
            a(href="#kittel") Katarzyna Kittel 
            | Experience report: Evolving architectures for modifying production code at runtime
          p UX Forms lets customers deploy custom code on the fly. During this talk I will show how we created our microservices platform in Scala (based on Docker & Kubernetes), that is also asynchronous, testable and secure.
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 16:30
      div.description.small-12.medium-10.large-11.columns Coffee
    div.row
      div.time.small-12.medium-2.large-1.columns 17:00
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-kasas
          h1
            a(href="#kasas") Valentin Kasas  
            | Those 10000 classes I never wrote
          p When validating data with Spark, or read/writing it to Kafka topics, the go-to solution is to write a Scala case class or a Java Bean. But what if you had only 5 developers, 10000+ data structures and only a few months to ship your project? Let me show you how the power of hylomorphisms combined with expressive schemas allowed us to write the code that validates and transforms data from dozens of tables from a hundred of data sources, and ship our project in time and on budget. 
    div.row
      div.time.small-12.medium-2.large-1.columns 17:30
      div.description.small-12.medium-10.large-11.columns
        div.talk#talk-szulc
          h1
            a(href="#szulc") Paweł Szulc 
            | Illogical Engineers
          p "Those who cannot remember the past are condemned to repeat it." Our industry is only 70 years old and we've already managed to repeat history few times. Curry and Howard think they've found a way to workaround this issue, but Russel and Whitehead said they tried that already and Godel spoiled all the fun. Dr. Kunth however bet $3,372,548 on that idea, so who knows?
    div.row.utility
      div.time.small-12.medium-2.large-1.columns 18:00
      div.description.small-12.medium-10.large-11.columns Ending
      
