section#agenda.row
  a.to-top(data-scroll, href="#top")
    img(src="images/icons/to-top.svg")
    br
    | to top
  header.section-title
    h1 Invited speaker
  div.agenda-table.small-12.medium-12.large-12.columns
    div.row
      div.description.small-12.medium-12.large-12.columns
        div.talk
          h1 Function-Passing Style: Typed, Distributed Functional Programming
          p The functional programming paradigm nicely fits problems in distributed programming. For example, moving computation to data can achieve multi-fold improvements in latency and throughput of big-data-style applications. This talk presents a new paradigm of “Function Passing Style” as an effective means of distributed programming. By bringing together recent advances in type systems research and new language features in Scala, this paradigm promotes new patterns of programming in distributed environments using distributable lambdas and types. We lay out the principles of this paradigm as well as guidelines for its application in practice.
        div.speaker
          div.speaker-photo
            img(src="images/speakers/heather-miller.png")
          div.speaker-bio
            h2 Heather Miller
            a(href="https://twitter.com/heathercmiller").speaker-link @heathercmiller
            p Heather Miller has been a member of the Scala team, and a PhD student under Martin Odersky, since 2011. Her research focuses on programming language and compiler support for distributed programming – in particular, using type systems to facilitate the design of new, functional distributed systems. She is a regular contributor to Scala, and was on the team that designed Scala’s Futures &amp; Promises, is responsible for improving several aspects of Scala documentation (API docs, guides, tutorials, quickrefs, including 
              a(href="http://docs.scala-lang.org/") docs.scala-lang.org
              |), and led the now &gt;200,000-student-strong Coursera massive open online course, “Functional Programming Principles in Scala.”